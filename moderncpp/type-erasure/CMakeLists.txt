# Minimum CMake version required (FetchContent needs >= 3.11, gtest_discover_tests >= 3.10)
cmake_minimum_required(VERSION 3.14)

# Define the project name and language
project(myproject LANGUAGES CXX) # You can rename 'myproject' if you like

# Set the C++ standard (matches -std=c++20 from Makefile)
set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF) # Optional: disable compiler-specific extensions for better portability

# --- Project Structure ---
# Define directories relative to the CMakeLists.txt location
set(INC_DIR ${CMAKE_CURRENT_SOURCE_DIR}/include)
set(SRC_DIR ${CMAKE_CURRENT_SOURCE_DIR}/src)
# Assuming your tests will live in a 'test' directory
set(TEST_DIR ${CMAKE_CURRENT_SOURCE_DIR}/test)

# --- Compiler Flags (matches -Wall -g -O3 from Makefile) ---
# CMake handles optimization levels (-O3) via build types (e.g., Release).
# -g is typically added for Debug builds. -Wall is a good general warning.
# We add -Wall globally here. You can customize flags per build type if needed.
add_compile_options(-Wall)
# You could add other flags like -Wextra here if desired:
# add_compile_options(-Wall -Wextra)

# --- Include Directories ---
# The include directory is added per-target below using target_include_directories,
# which is generally preferred over the global include_directories().
# You could uncomment this if you have a strong reason for a global include path:
# include_directories(${INC_DIR})

# --- Source Files ---
# Find all .cpp files in the src directory (similar to wildcard)
file(GLOB SRC_FILES "${SRC_DIR}/*.cpp")

# --- Main Executable Target ---
# Define the executable named 'myprogram' (matches TARGET from Makefile)
add_executable(myprogram ${SRC_FILES})

# Ensure the executable can find headers in the include directory
target_include_directories(myprogram PRIVATE ${INC_DIR})

# --- Google Test Integration ---
# Enable testing support in CMake
enable_testing()

# Use FetchContent to download and prepare Google Test
include(FetchContent)
FetchContent_Declare(
  googletest
  # Specify the Git repository and a tag (e.g., a release version)
  GIT_REPOSITORY https://github.com/google/googletest.git
  GIT_TAG        v1.16.0 # Using v1.14.0 as an example, update if needed
)

# Ensure Google Mock is also available
set(BUILD_GMOCK ON CACHE BOOL "" FORCE)
set(BUILD_GTEST ON CACHE BOOL "" FORCE)

# For Windows: Prevent overriding the parent project's compiler/linker settings
set(gtest_force_shared_crt ON CACHE BOOL "" FORCE)

# Make Google Test available (downloads and configures it)
FetchContent_MakeAvailable(googletest)

# --- Test Executable Target ---
# Find all .cpp files in the test directory
file(GLOB TEST_SRC_FILES "${TEST_DIR}/*.cpp")

# Only create the test target if test source files exist
if(TEST_SRC_FILES)
  # Define the test executable
  add_executable(runTests ${TEST_SRC_FILES})

  # Link the test executable against Google Test (GTest::gtest_main includes GTest::gtest)
  # This ALSO provides the necessary include directories for gtest and gmock
  target_link_libraries(runTests PRIVATE GTest::gtest_main)

  # Ensure the test executable can also find headers in the project's include directory
  target_include_directories(runTests PRIVATE ${INC_DIR})

  # Include the GoogleTest module to help discover tests
  include(GoogleTest)
  # Automatically add tests from the 'runTests' executable to CTest
  gtest_discover_tests(runTests)
else()
  message(STATUS "No source files found in ${TEST_DIR}. Skipping test target 'runTests'.")
endif()

# --- Build Directory & Clean ---
# CMake handles the build directory automatically (out-of-source builds are recommended).
# Build systems generated by CMake (like Makefiles or Ninja) provide a 'clean' target.
